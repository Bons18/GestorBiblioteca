Herencia üìö

La herencia en este c√≥digo se implementa de la siguiente manera:

‚Ä¢	Se define una clase base abstracta Material que contiene propiedades comunes como #titulo, #autor, #a√±oPublicacion, y m√©todos como mostrarInformacion, y getters para estas propiedades.

‚Ä¢	Las clases Libro, Revista y Periodico extienden (extends) la clase Material. Esto significa que heredan todas las propiedades y m√©todos definidos en Material.

Polimorfismo üé≠

‚Ä¢	El polimorfismo se observa en las implementaciones del m√©todo mostrarInformacion en las clases Libro, Revista, y Periodico.

‚Ä¢	Aunque mostrarInformacion es declarado como un m√©todo abstracto en Material (sin implementaci√≥n real), cada subclase proporciona su propia implementaci√≥n espec√≠fica de este m√©todo.
	
‚Ä¢	Por ejemplo, Libro muestra informaci√≥n con detalles adicionales como ISBN y G√©nero, mientras que Revista incluye ISSN, Volumen, y N√∫mero.

Abstracci√≥n üåü

‚Ä¢	La abstracci√≥n se logra mediante el uso de una clase abstracta Material.

‚Ä¢	Esta clase define un m√©todo mostrarInformacion como abstracto, lo que significa que no tiene una implementaci√≥n directa en Material pero debe ser implementado por cualquier subclase que extienda Material.

‚Ä¢	Esto asegura que cada tipo de material (Libro, Revista, Periodico) tenga su propio m√©todo mostrarInformacion con detalles espec√≠ficos, manteniendo una interfaz com√∫n (Material) para acceder a estos datos.

Encapsulamiento üîí

‚Ä¢	El encapsulamiento se aplica usando campos privados (#titulo, #autor, #a√±oPublicacion, #isbn, #genero, #issn, #volumen, #numero, #fechaPublicacion) en las clases Material, Libro, Revista, y Periodico.

‚Ä¢	Estos campos son accesibles solo a trav√©s de m√©todos getters (titulo, autor, a√±oPublicacion, etc.), lo que controla c√≥mo se accede y se modifica la informaci√≥n de cada material.

‚Ä¢	Este enfoque ayuda a mantener la integridad de los datos y a prevenir modificaciones no autorizadas desde fuera de la clase.
